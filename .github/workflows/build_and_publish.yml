
name: Build and Publish

on:
  push:
    branches: [ main ]
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  SERVER_NAME: todo_server
  CLIENT_NAME: todo_client
  SERVER_IMAGE: ghcr.io/${{ github.actor }}/todo_server
  CLIENT_IMAGE: ghcr.io/${{ github.actor }}/todo_client
  VERSION: ${{ github.sha }}

jobs:
  build:
    name: Build Docker image and push to repositories
    runs-on: ubuntu-latest
    steps:
      # 현재 소스콛드를 가상의 컨테이너 안으로 checkout
      - name: Checkout code
        uses: actions/checkout@v2
      # 가상의 컨테이너 안에 docker 환경 설치
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      # ghcr 로그인
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # docker image push to ghcr
      - name: Sever push
        id: server_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.SERVER_IMAGE }}:latest

      - name: Client push
        id: client_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./front-end/Dockerfile
          push: true
          tags: ${{ env.CLIENT_IMAGE }}:latest

  deploy:
    needs: build
    name: Deploy
#    permissions:
#      packages: read
    runs-on: [ self-hosted, linux, x64 ]
    steps:
      - name: Login to Github Packages
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      - name: Docker run
        run: |
          sudo docker stop ${{ env.SERVER_NAME }} ${{ env.CLIENT_NAME }} && sudo docker rm ${{ env.SERVER_NAME }} ${{ env.CLIENT_NAME }} && sudo docker rmi ${{ env.SERVER_IMAGE }} ${{ env.CLIENT_IMAGE }}
          sudo docker run -d -p 8080:8080 --name ${{ env.SERVER_NAME }} --restart always ${{ env.SERVER_IMAGE }}:latest
          sudo docker run -d -p 9090:80 --name ${{ env.CLIENT_NAME }} --restart always ${{ env.CLIENT_IMAGE }}:latest
